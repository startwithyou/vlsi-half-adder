3. Generic Ripple Carry Adder using Full adders

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
entity rca is
    Port ( a : in STD_LOGIC_VECTOR (3 downto 0);
           b : in STD_LOGIC_VECTOR (3 downto 0);
           cin : in STD_LOGIC;
           sum : out STD_LOGIC_VECTOR (3 downto 0);
           cout : out STD_LOGIC);
end rca;

architecture Structural of rca is
component full_adderst is
    Port ( a : in STD_LOGIC;
           b : in STD_LOGIC;
           cin : in STD_LOGIC;
           s : out STD_LOGIC;
           cout : out STD_LOGIC);
end component;
signal temp : std_logic_vector(3 downto 0);
begin
u1: full_adderst port map(a(0), b(0), cin, sum(0), temp(0));
u2: full_adderst port map(a(1), b(1), temp(0), sum(1), temp(1));
u3: full_adderst port map(a(2),b(2),temp(1),sum(2),temp(2));
u4: full_adderst port map(a(3),b(3),temp(2),sum(3),cout);
end Structural;

Testbench for Ripple Carry Adder :
library IEEE;
use IEEE.STD_LOGIC_1164.ALL; 
entity rca_tb is
--  Port ( );
end rca_tb;

architecture Behavioral of rca_tb is
component rca 
    Port ( a : in STD_LOGIC_VECTOR (3 downto 0);
           b : in STD_LOGIC_VECTOR (3 downto 0);
           cin : in STD_LOGIC;
           sum : out STD_LOGIC_VECTOR (3 downto 0);
           cout : out STD_LOGIC);
end component;
signal a, b, sum : std_logic_vector(3 downto 0);
signal cin,cout : std_logic;
begin
u1: rca port map(a,b,cin,sum,cout);
process
begin
a<="0101";
b<="1010";
cin<='1';
wait for 200 ns;
a<="1101";
b<="1000";
cin<='0';
wait for 200 ns;
a<="1010";
b<="0101";
cin<='1';
wait for 200 ns;
a<="0010";
b<="0111";
cin<='0';
wait for 200 ns;
end process;
