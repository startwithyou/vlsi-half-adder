2. SIPO
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;
entity sipo is
    Port ( clk : in STD_LOGIC;
           slow_clk: inOUT STD_LOGIC;
           in2 : in STD_LOGIC;
           out2 : inout STD_LOGIC_VECTOR (3 downto 0));
end sipo;

architecture Behavioral of sipo is
signal counter: std_logic_vector(1 downto 0):=(others =>'0');
begin
process(slow_clk,in2,out2)
	begin
	if(slow_clk'EVENT and slow_clk='1') THEN
		out2(3 DOWNTO 1) <= out2(2 DOWNTO 0);
		out2(0) <= in2;
	end if;
	end process;
process(clk)
  begin
     if (clk'event and clk='1')then
      counter <=counter+'1';
     end if;
     end process;
 slow_clk <= counter(1);
end Behavioral;

Testbench of SIPO :
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
entity sipo_tb is
--  Port ( );
end sipo_tb;

architecture Behavioral of sipo_tb is
component sipo is
    Port ( clk : in  STD_LOGIC;
           slow_clk: inout STD_LOGIC;
           in2 : in  STD_LOGIC;
           out2 : inout  STD_LOGIC_VECTOR (3 downto 0));
end component;
signal clk, in2,slow_clk: std_logic;
signal out2 : std_logic_vector( 3 downto 0);

begin
u1: sipo port map ( clk,slow_clk,in2,out2);

process
begin
clk<= '0';
wait for 10 ns;
clk<= '1';
wait for 10 ns ;
end process;
in2<= '1', '0' after 100 ns;
end Behavioral;
